#name: publish
#
#on:
#  push:
#    tags:
#      - 'v*'
#
#jobs:
#  check-version:
#    runs-on: ubuntu-latest
#    env:
#      RUST_BACKTRACE: 1
#
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#        with:
#          submodules: true
#
#      - uses: olegtarasov/get-tag@v2
#        id: tag-name
#        with:
#          tagRegex: "v(.*)"
#          tagRegexGroup: 1
#
##      - id: package-version
##        run: |
##          sudo npm i -g json
##          PACKAGE_VERSION=$(json version -f package.json)
##          echo $PACKAGE_VERSION
##          echo "::set-output name=package_version::$PACKAGE_VERSION"
##
##      - name: Fail on version missmatch
##        run: exit 1
##        if: ${{ steps.package-version.outputs.package_version != steps.tag-name.outputs.tag }}
##
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: true
#
#  python-publish:
#    needs: check-version
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [3.5, 3.6, 3.7, 3.8]
#        os: [ubuntu-latest, macos-latest, windows-latest]
#        exclude:
#          # There is a known issue where Python C extensions
#          # can not be built on Python 3.5 on Windows.
#          # https://github.com/actions/virtual-environments/issues/34
#          # Therefore, ujson can't be compiled and the build would fail.
#          - os: windows-latest
#            python-version: 3.5
#    steps:
#      - uses: actions/checkout@v1
#        with:
#          submodules: true
#
#      - uses: actions/setup-python@v1
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install latest stable
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry
#          poetry install
#
#      - name: Build Python package
#        run: poetry run maturin build --release --no-sdist --strip --interpreter python${{matrix.python_version}}
#
#      - name: List wheels
#        if: matrix.os == 'windows-latest'
#        run: dir target\wheels\
#
#      - name: List wheels
#        if:  matrix.os != 'windows-latest'
#        run: find ./target/wheels/
#
#      # Note: Windows doesn't support glob
#      # https://stackoverflow.com/a/52481267/270334
#      - name: Install wheels
#        if:  matrix.os == 'windows-latest'
#        run: pip install --find-links=target\wheels exogress
#
#      - name: Install wheels
#        if:  matrix.os != 'windows-latest'
#        run: pip install target/wheels/exogress*.whl
#
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: target/wheels/exogress*.whl
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
##      - name: PyPi publish
##        if: github.event_name == 'release' && github.event.action == 'created'
##        env:
##          MATURIN_PASSWORD: ${{ secrets.PYPI }}
##        run: poetry run maturin publish --username __token__
